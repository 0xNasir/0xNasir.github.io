{"version":3,"sources":["pokeball.png","components/navbar.js","components/home.js","components/contact.js","components/about.js","components/rainbow.js","hoc/RainBow.js","components/post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withRouter","props","react_default","a","createElement","className","Link","to","NavLink","Home","state","posts","_this2","this","axios","get","then","response","console","log","setState","data","slice","postList","length","map","post","key","id","src","pokeball","alt","title","body","Component","Contact","setTimeout","history","push","About","RainBow","WrappedComponent","colorName","Math","floor","random","Post","match","params","post_id","res","App","BrowserRouter","navbar","Switch","Route","exact","path","component","Rain","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0NCoBzBC,cAlBD,SAACC,GAId,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,cAAvB,cACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACdH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,SACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASD,GAAG,YAAZ,YACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASD,GAAG,UAAZ,UACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASD,GAAG,YAAZ,2EC6BSE,6MAtCdC,MAAM,CACLC,MAAO,uFAEW,IAAAC,EAAAC,KAClBC,IAAMC,IAAI,8CACTC,KAAK,SAAAC,GACLC,QAAQC,IAAIF,GACZL,EAAKQ,SAAS,CACbT,MAAMM,EAASI,KAAKC,MAAM,EAAE,yCAIvB,IACAX,EAAOE,KAAKH,MAAZC,MACDY,EAASZ,EAAMa,OACpBb,EAAMc,IAAI,SAAAC,GACT,OACCxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYsB,IAAKD,EAAKE,IACrC1B,EAAAC,EAAAC,cAAA,OAAKyB,IAAKC,IAAUC,IAAI,eACxB7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,IAAImB,EAAKE,IACnB1B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcqB,EAAKM,QAEnC9B,EAAAC,EAAAC,cAAA,SAAIsB,EAAKO,UAMX/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,gBAED,OACCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdkB,UAlCeW,aCSJC,EAZA,SAAClC,GAIf,OAHAmC,WAAW,WACVnC,EAAMoC,QAAQC,KAAK,WAClB,KAEDpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,WACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,yCACAH,EAAAC,EAAAC,cAAA,gcCAamC,EARF,WACZ,OACCrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,SACAH,EAAAC,EAAAC,cAAA,gcCMaoC,ECVC,SAACC,GAChB,IAEMC,EAFO,CAAC,MAAM,SAAS,OAAO,QAAS,OAAQ,WAC5BC,KAAKC,MAAoB,EAAdD,KAAKE,WACX,QAC9B,OAAO,SAAC5C,GACP,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAWqC,GAChBxC,EAAAC,EAAAC,cAACqC,EAAqBxC,KDGVuC,CATH,SAACvC,GAEZ,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,WACAH,EAAAC,EAAAC,cAAA,icEyBa0C,6MA7BdpC,MAAM,CACLgB,KAAK,yFAEa,IAAAd,EAAAC,KACde,EAAGf,KAAKZ,MAAM8C,MAAMC,OAAOC,QAC/BnC,IAAMC,IAAI,8CAA8Ca,GACvDZ,KAAK,SAAAkC,GACLtC,EAAKQ,SAAS,CACbM,KAAKwB,EAAI7B,OAEVH,QAAQC,IAAI+B,sCAIb,IAAMxB,EAAKb,KAAKH,MAAMgB,KACrBxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUQ,KAAKH,MAAMgB,KAAKM,OACxC9B,EAAAC,EAAAC,cAAA,SAAIS,KAAKH,MAAMgB,KAAKO,OAGpB/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,mBAED,OACCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdqB,UAzBeQ,aC2BJiB,mLAjBX,OACAjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACEpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjD,IACjCP,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWnB,IAChCrC,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWvB,IAClCjC,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWC,IAClCzD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWZ,cAX3BZ,aCEE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2DCZNiB,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.a54124c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from 'react'\r\nimport {Link, NavLink, withRouter} from 'react-router-dom' \r\nconst Navbar= (props) =>{\r\n\t// setTimeout(()=>{\r\n\t// \tprops.history.push('/about')\r\n\t// }, 2000)\r\n\treturn (\r\n\t\t<nav className=\"nav-wrapper red darken-3\">\r\n\t\t<div className=\"container\">\r\n\t\t<Link to=\"/\" className=\"brand-logo\">Poke'Times</Link>\r\n\t\t<ul className=\"right\">\r\n\t\t<li><Link to=\"/\">Home</Link></li>\r\n\t\t<li><NavLink to=\"/contact\">Contact</NavLink></li>\r\n\t\t<li><NavLink to=\"/about\">About</NavLink></li>\r\n\t\t<li><NavLink to=\"/rainbow\">Rainbow</NavLink></li>\r\n\t\t</ul>\r\n\t\t</div>\r\n\t\t</nav>\r\n\t)\r\n}\r\nexport default withRouter(Navbar)","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport {Link} from 'react-router-dom'\r\nimport pokeball from '../pokeball.png'\r\nclass Home extends Component{\r\n\tstate={\r\n\t\tposts: []\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\taxios.get('https://jsonplaceholder.typicode.com/posts')\r\n\t\t.then(response=>{\r\n\t\t\tconsole.log(response)\r\n\t\t\tthis.setState({\r\n\t\t\t\tposts:response.data.slice(0,10)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\trender(){\r\n\t\tconst {posts}=this.state;\r\n\t\tconst postList=posts.length?(\r\n\t\t\tposts.map(post=>{\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className=\"post card\" key={post.id}>\r\n\t\t\t\t\t<img src={pokeball} alt=\"A pokeball\"/>\r\n\t\t\t\t\t<div className=\"card-content\">\r\n\t\t\t\t\t<Link to={'/'+post.id}>\r\n\t\t\t\t\t<span className=\"card-title\">{post.title}</span>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t\t<p>{post.body}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t\t):(\r\n\t\t\t<div className=\"center\">No posts yet</div>\r\n\t\t\t)\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t{postList}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nexport default Home","import React from 'react'\r\nconst Contact= (props) =>{\r\n\tsetTimeout(()=>{\r\n\t\tprops.history.push('/about')\r\n\t},2000);\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t<h4 className=\"center\">Contact</h4>\r\n\t\t<h5 className=\"center\">Redirect to about page after 2 second</h5> \r\n\t\t<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores voluptates soluta impedit culpa expedita sed quod harum reiciendis, sint laudantium sit aspernatur similique eaque optio ipsum accusantium, tempora nobis?Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore eos, in ad atque tempore necessitatibus hic mollitia numquam odio quas molestias ducimus quisquam alias amet sunt fuga ex neque vitae?</p>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Contact","import React from 'react'\r\nconst About= () =>{\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t<h4 className=\"center\">About</h4>\r\n\t\t<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores voluptates soluta impedit culpa expedita sed quod harum reiciendis, sint laudantium sit aspernatur similique eaque optio ipsum accusantium, tempora nobis?Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore eos, in ad atque tempore necessitatibus hic mollitia numquam odio quas molestias ducimus quisquam alias amet sunt fuga ex neque vitae?</p>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default About","import React from 'react'\r\nimport RainBow from '../hoc/RainBow'\r\nconst Rain= (props) =>{\r\n\t\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t<h4 className=\"center\">Rainbow</h4>\r\n\t\t<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores voluptates soluta impedit culpa expedita sed quod harum reiciendis, sint laudantium sit aspernatur similique eaque optio ipsum accusantium, tempora nobis?Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore eos, in ad atque tempore necessitatibus hic mollitia numquam odio quas molestias ducimus quisquam alias amet sunt fuga ex neque vitae?</p>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default RainBow(Rain)","import React from 'react'\r\nconst RainBow = (WrappedComponent)=>{\r\n\tconst colors=['red','yellow','blue','green', 'pink', 'magenta'];\r\n\tconst randomColor=colors[Math.floor(Math.random()*5)];\r\n\tconst colorName=randomColor + '-text';\r\n\treturn (props) =>{\r\n\t\treturn (\r\n\t\t\t<div className={colorName}>\r\n\t\t\t<WrappedComponent {...props} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nexport default RainBow","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nclass Post extends Component{\r\n\tstate={\r\n\t\tpost:null\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tlet id=this.props.match.params.post_id\r\n\t\taxios.get('https://jsonplaceholder.typicode.com/posts/'+id)\r\n\t\t.then(res=>{\r\n\t\t\tthis.setState({\r\n\t\t\t\tpost:res.data\r\n\t\t\t})\r\n\t\t\tconsole.log(res)\r\n\t\t})\r\n\t}\r\n\trender(){\r\n\t\tconst post=this.state.post?(\r\n\t\t\t<div className=\"post\">\r\n\t\t\t<h4 className=\"center\">{this.state.post.title}</h4>\r\n\t\t\t<p>{this.state.post.body}</p>\r\n\t\t\t</div>\r\n\t\t\t):(\r\n\t\t\t<div className=\"center\">Loading post...</div>\r\n\t\t)\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t{post}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nexport default Post","import React, { Component } from 'react';\nimport Navbar from './components/navbar'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Home from './components/home'\nimport Contact from './components/contact'\nimport About from './components/about'\nimport Rain from './components/rainbow'\nimport Post from './components/post'\nimport './index.css'\n\nclass App extends Component {\n  render() {\n    return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/rainbow\" component={Rain} />\n          <Route path=\"/:post_id\" component={Post}/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}